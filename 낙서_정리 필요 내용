!!API 연동은 일단 테스트 집계 처리 다음에 한다.
!!!source 는 하나로 관리해야 -> fail 처리할 수 있다.
!!!하지만, 모니터링 부분은 어쩔 수 없이 DB 에서 해야 할 듯 함!!

* 30초에 한 번씩 => vodInfo (? serviceIp, ? serviceState:running, ...) ser 얻어와(테스트 코드로 한다), 
 - 목=> 홈초이스 서버(? LSM, STR)에서 설정상 ON 상태인 서버를,  ON 에서 가끔 OFF 로 변경
 ==> server_id, server_ip, 

* 30초에 한 번씩 => sessions 얻어와(테스트 코드로 한다), 
 - 세션트래픽: vodIp(6개), stbIp(1000개), fileName(1만개), currentBandwidth(20000000)

 - flag 테이블 사용, xx_1, xx_2 의 2개 테이블에서 '서비스 중'인 테이블의 번호를 적어 구분한다.
  서버=> vodIp, stbIp, fileName 키로 *** agg !!!  => count, traffic 구함(합)

  db=> 서버별: vodIp(홈초이스 vod server_ip) 로 server_id, server_nm 구하고,
       server_id 별 traffic 합 agg
       조인 tbl_llt_setting_server on server_id => get traffic_critical, process_status, traffic_status
  db=> so 별:stbIp(so vod server_ip) 로 so_cd, so_nm 구하고,
       so_cd 별 traffic 합 agg
       조인 tbl_llt_setting_so on so_cd

  db=> 서버 임계치, so 임계치, so-콘텐츠 임계치 테이블 JOIN 등으로
       알람 발생 확인
       알람 이력 확인
     ==> 알람 발생(이력 생성) 
     { 새로 발생한 것은 알람 이력 생성, '알람on' 표시(agg에 현재 발생 알람 갖고 있어야함)
       없어진 것은 update 처리로 '알람off' 표시
       - 알람종류 3: 서버, so, so-콘텐츠
     }

* 1시간 주기로 report 테이블 집계.
 - 매시 3분에 시작
 - vod_log : ReportCollector 에서 DB에 넣어줌, auto_increment 걸러 id 넣어준다!!
  => id 기반으로 이력을 관리하여 fail 에 대비하여 이력 남김
   => id, server_ip(?홈초이스 vod 서버), client_ip(?so의 vod 서버)
      , log_date(? sess_e_dtime와 같은 값으로, hitcount 기준?)
      , filename

 - DB의 로그를 서버로 읽어와서 => 메모리에서 '시, 일, 월' 단위로 집계한다.
   insert & update 되도록 'ON duplicate key update ' 구문 넣음.
    => 같은키로 다시 넣을 때 update 되는지 확인 필요!! 
       기존 테스트는 select .. group by 로 에러는 나지 않았으나, 업데이트는 되지 않았던 것 같음.
       ===> 해당 구문에 update 될 값을 잘못 설정해서 그러했음
       이런 식으로 'ON DUPLICATE KEY UPDATE traffic = f.traffic' 하면 됨.
   


3. DB query

SELECT COUNT(*) hit_count
 , DATE_FORMAT(log_date, '%Y-%m-%d') date
 , DATE_FORMAT(log_date, '%H') hour
 , DATE_FORMAT(log_date, '%U') week_of_year
 , DATE_FORMAT(log_date, '%w') day_of_week -- 0 ~ 6
...
GROUP BY server_ip, filename

SELECT SUBSTRING(date, 1, 6) FROM tbl_llt_servercontenthitcountperday

-- Reset idbase history
UPDATE tbl_llt_aggregate_idbase_history SET agg_completed_end_id = 0;

-- check status qry --
  select date, hour, minute, count(*) from tbl_llt_sessionsper5minute
  group by date, hour, minute;

-- Check data length of each schema
SELECT table_schema, SUM((data_length+index_length)/1024/1024) MB 
FROM information_schema.tables GROUP BY 1;

-- maria event scheduler
SHOW EVENTS ;
SELECT * FROM INFORMATION_SCHEMA.EVENTS;
